@page "/nouns"
<h3>Noun Exercises</h3>

<p>Fill in the noun article, and hit the "check results" button to see if you are correct.</p>

<div class="container-fluid">
    @if (Model != null)
    {
        <EditForm Model="@Model">
            <DataAnnotationsValidator/>

            <div class="row">
                <div class="col">
                    Article
                </div>
                <div class="col">
                    Noun
                </div>
            </div>

            <div class="row justify-content-start">
                <div class="col">
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-secondary" @onclick="DieClicked">die</button>
                        <button type="button" class="btn btn-secondary" @onclick="DerClicked">der</button>
                        <button type="button" class="btn btn-secondary" @onclick="DasClicked">das</button>
                    </div>
                </div>

                <div class="col align-middle">
                    <div>@(Model.CurrentNoun)</div>
                </div>
            </div>

            @* @if(@ShowAlert) { *@
            @*     <div class="alert @(Model.IsCorrect ? "alert-success" : "alert-warning")" role="alert"> *@
            @*         @AlertMessageText *@
            @*     </div> *@
            @* } *@

            @* <button type="reset" class="btn btn-danger" @onclick="ResetNounProgress">Reset Progress</button> *@

            <ValidationSummary />

        </EditForm>
    }

    @code {
        private NounModel? Model { get; set; }
        private LanguageService NounService { get; set; }

        private bool ShowAlert { get; set; } = false;
        private string AlertMessageText { get; set; } = "";
        
        public DoNouns(LanguageService nounService)
        {
            NounService = nounService;
        }

        private async Task DerClicked() => await UpdateProgressAndFetchNext(Model!.CurrentArticle == "der");
        private async Task DieClicked() => await UpdateProgressAndFetchNext(Model!.CurrentArticle == "die");
        private async Task DasClicked() => await UpdateProgressAndFetchNext(Model!.CurrentArticle == "das");

        private async Task UpdateProgressAndFetchNext(bool isCorrect)
        {
            // Model!.IsCorrect = isCorrect;
            //
            // ShowAlert = true;
            // AlertMessageText = "Not quite there... try once more.";
            // if(isCorrect) {
            //     AlertMessageText = "You are correct!";
            // }
            //
            // await NounService.UpdateNounProgressAsync(1, new NounProgressRequest{
            //     NounId = Model.Original.Id,
            //     AnswerWasCorrect = isCorrect
            // });
            //
            // await Task.Delay(2000);
            //
            // if (Model!.IsCorrect)
            // {
            //     await FetchNewLearningSessionData();
            // }
            //
            // ShowAlert = false;
        
            StateHasChanged();
        }

        protected override async Task OnInitializedAsync()
        {
            await FetchNewLearningSessionData();
        }

        private async Task FetchNewLearningSessionData()
        {
            var data = await NounService.GetPractiseNounsAsync(1);
            Model = new NounModel {
                CurrentIndex = 0,
                LearningSession = data.Select(x => new LearningNoun(){
                    Data = x,
                    AnsweredCorrectly = false
                }).ToArray() 
            };
        }

        public class LearningNoun {
            public required LanguageNoun Data { get; set; }
            public bool AnsweredCorrectly { get; set; }
        }
        
        public class NounModel {
            public int CurrentIndex { get; set; }
            public required LearningNoun[] LearningSession { get; set; }
            
            public string CurrentNoun => LearningSession[CurrentIndex].Data.Noun;
            public string CurrentArticle => LearningSession[CurrentIndex].Data.Article;
            public string CurrentPlural => LearningSession[CurrentIndex].Data.Plural;
            
        }

        // private async void ResetNounProgress()
        // {
        //     ShowAlert = true;
        //     AlertMessageText = "Progress has been reset.";
        //     Model!.IsCorrect = false;
        //
        //     // await NounService.DeleteAllNounProgressAsync(1);
        //     // await FetchNewLearningSessionData();
        // }    
    }
</div>
