@page "/"
@using LangVoyageWebApp.Components
@inject NavigationManager NavigationManager
@inject LanguageService LangService

<PageTitle>Learning Center</PageTitle>

<div class="dashboard-container">
    <h1>Learning Center</h1>
    <p class="dashboard-subtitle">Track your language learning progress</p>

    <div class="progress-grid">
        <CircularProgress Progress="@GetNounProgress()"
        Size="160"
        FillColor="var(--primary-color)"
        BackgroundColor="var(--surface-tertiary)"
        InnerText="@NounOverviewText"
        OnClickCallback="@(() => NavigationManager.NavigateTo("/nouns"))">
            <IconContent>
                <i class="fa-solid fa-book"></i>
            </IconContent>
        </CircularProgress>

        <CircularProgress Progress="15"
        Size="160"
        FillColor="var(--secondary-color)"
        BackgroundColor="var(--surface-tertiary)"
        InnerText="Sentences"
        OnClickCallback="@(() => NavigationManager.NavigateTo("/sentences"))">
            <IconContent>
                <i class="fa-solid fa-pen"></i>
            </IconContent>
        </CircularProgress>

        <CircularProgress Progress="50"
        Size="160"
        FillColor="var(--accent-color)"
        BackgroundColor="var(--surface-tertiary)"
        InnerText="Speaking"
        OnClickCallback="@(() => NavigationManager.NavigateTo("/speaking"))">
            <IconContent>
                <i class="fa-solid fa-microphone"></i>
            </IconContent>
        </CircularProgress>

        <CircularProgress Progress="30"
        Size="160"
        FillColor="#8b5cf6"
        BackgroundColor="var(--surface-tertiary)"
        InnerText="Listening"
        OnClickCallback="@(() => NavigationManager.NavigateTo("/listening"))">
            <IconContent>
                <i class="fa-solid fa-headphones"></i>
            </IconContent>
        </CircularProgress>
    </div>
</div>

@code {

    private LearningProgressResponse? LearningProgress { get; set; }
    private string NounOverviewText
    {
        get
        {
            if (LearningProgress == null)
            {
                return "Nouns";
            }

            return $"Nouns: {LearningProgress.NounProgresses.Sum()} / {LearningProgress.TotalNouns}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        LearningProgress = await LangService.GetLearningProgressAsync(1);
    }

    private int GetNounProgress()
    {
        if (LearningProgress == null)
        {
            return 0;
        }

        return (int)((float)LearningProgress.NounProgresses.Sum() / LearningProgress.TotalNouns);
    }

}
